(ns meander.compiled.match-compile.zeta (:require [meander.runtime.zeta]))
(clojure.core/defn match-compile [input__19027] (let* [ret__14540__auto__ (clojure.core/letfn [(CATA__FN__19030 [input__19027] (clojure.core/letfn [(state__19435 [] (if (clojure.core/vector? input__19027) (clojure.core/letfn [(state__19439 [] (if (clojure.core/= (clojure.core/count input__19027) 2) (clojure.core/let [input__19027_nth_0__ (clojure.core/nth input__19027 0) input__19027_nth_1__ (clojure.core/nth input__19027 1)] (if (clojure.core/seq? input__19027_nth_0__) (clojure.core/let [input__19027_nth_0___l__ (clojure.core/take 1 input__19027_nth_0__)] (if (clojure.core/= (clojure.core/bounded-count (clojure.core/inc 1) input__19027_nth_0___l__) 1) (clojure.core/let [input__19027_nth_0___r__ (clojure.core/drop 1 input__19027_nth_0__)] (clojure.core/let [input__19027_nth_0___l___nth_0__ (clojure.core/nth input__19027_nth_0___l__ 0)] (if (clojure.core/vector? input__19027_nth_0___l___nth_0__) (if (clojure.core/= (clojure.core/count input__19027_nth_0___l___nth_0__) 2) (clojure.core/let [input__19027_nth_0___l___nth_0___nth_0__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 0) input__19027_nth_0___l___nth_0___nth_1__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 1)] (if (clojure.core/map? input__19027_nth_0___l___nth_0___nth_0__) (clojure.core/let [VAL__19419 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :next) VAL__19418 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tag)] (clojure.core/case VAL__19418 (:as) (clojure.core/let [VAL__19044 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :pattern)] (clojure.core/let [?pattern VAL__19044] (clojure.core/let [?next VAL__19419] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?pattern ?target] [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))) (:cat) (clojure.core/let [VAL__19056 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :sequence)] (if (clojure.core/vector? VAL__19056) (clojure.core/let [!asts []] (clojure.core/let [ret__14524__auto__ (meander.match.runtime.epsilon/run-star-1 VAL__19056 [!asts] (clojure.core/fn [[!asts] input__19062] (clojure.core/let [input__19062_nth_0__ (clojure.core/nth input__19062 0)] (clojure.core/let [!asts (clojure.core/conj !asts input__19062_nth_0__)] [!asts]))) (clojure.core/fn [[!asts]] (clojure.core/let [X__19061 (clojure.core/count VAL__19056)] (clojure.core/let [?n X__19061] (clojure.core/let [?next VAL__19419] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19046 (gensym)] (clojure.core/let [?split-symbol x__19046] (clojure.core/let [x__19047 (gensym)] (clojure.core/let [?take-symbol x__19047] (clojure.core/let [x__19048 (gensym)] (clojure.core/let [?drop-symbol x__19048] (try [(clojure.core/let [!asts__counter (meander.runtime.zeta/iterator !asts)] (clojure.core/list (quote meander.runtime.zeta/bind) [?split-symbol (clojure.core/list (quote meander.runtime.zeta/-split-at) ?target ?n)] (clojure.core/list (quote let*) [?take-symbol (clojure.core/list (quote clojure.core/nth) ?split-symbol 0) ?drop-symbol (clojure.core/list (quote clojure.core/nth) ?split-symbol 1)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(quote meander.dev.zeta/nths) (clojure.core/into [] (clojure.core/vec (meander.substitute.runtime.epsilon/iterator-seq !asts__counter))) ?take-symbol (clojure.core/dec ?n) [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?drop-symbol]) ?rest)) ?env]])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))))))))))))] (if (meander.runtime.zeta/fail? ret__14524__auto__) (state__19440) ret__14524__auto__))) (state__19440))) (state__19440))) (state__19440))) (state__19440)) (state__19440)))) (state__19440))) (state__19440))) (state__19440))) (state__19440 [] (if (clojure.core/= (clojure.core/count input__19027) 5) (clojure.core/let [input__19027_nth_0__ (clojure.core/nth input__19027 0)] (clojure.core/letfn [(state__19442 [] (clojure.core/let [input__19027_nth_3__ (clojure.core/nth input__19027 3) input__19027_nth_4__ (clojure.core/nth input__19027 4)] (if (clojure.core/= input__19027_nth_3__ -1) (if (clojure.core/= input__19027_nth_0__ (quote meander.dev.zeta/nths)) (clojure.core/let [?state input__19027_nth_4__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 ?state)] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))) (state__19443)) (state__19443)))) (state__19443 [] (clojure.core/let [input__19027_nth_1__ (clojure.core/nth input__19027 1) input__19027_nth_2__ (clojure.core/nth input__19027 2) input__19027_nth_3__ (clojure.core/nth input__19027 3) input__19027_nth_4__ (clojure.core/nth input__19027 4)] (if (clojure.core/= input__19027_nth_0__ (quote meander.dev.zeta/nths)) (if (clojure.core/vector? input__19027_nth_1__) (clojure.core/let [n__19070 (clojure.core/count input__19027_nth_1__) m__19071 (clojure.core/max 0 (clojure.core/- n__19070 1)) input__19027_nth_1___l__ (clojure.core/subvec input__19027_nth_1__ 0 (clojure.core/min (clojure.core/count input__19027_nth_1__) m__19071)) input__19027_nth_1___r__ (clojure.core/subvec input__19027_nth_1__ m__19071)] (if (clojure.core/= (clojure.core/count input__19027_nth_1___r__) 1) (clojure.core/let [!rest-asts (clojure.core/vec input__19027_nth_1___l__)] (if (clojure.core/= (clojure.core/count input__19027_nth_1___r__) 1) (clojure.core/let [input__19027_nth_1___r___nth_0__ (clojure.core/nth input__19027_nth_1___r__ 0)] (clojure.core/let [?ast input__19027_nth_1___r___nth_0__] (clojure.core/let [?target input__19027_nth_2__] (clojure.core/let [?n input__19027_nth_3__] (if (clojure.core/vector? input__19027_nth_4__) (if (clojure.core/= (clojure.core/count input__19027_nth_4__) 2) (clojure.core/let [input__19027_nth_4___nth_0__ (clojure.core/nth input__19027_nth_4__ 0) input__19027_nth_4___nth_1__ (clojure.core/nth input__19027_nth_4__ 1)] (clojure.core/let [?queue input__19027_nth_4___nth_0__] (clojure.core/let [?env input__19027_nth_4___nth_1__] (try [(clojure.core/let [!rest-asts__counter (meander.runtime.zeta/iterator !rest-asts)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(quote meander.dev.zeta/nths) (clojure.core/into [] (clojure.core/vec (meander.substitute.runtime.epsilon/iterator-seq !rest-asts__counter))) ?target (clojure.core/dec ?n) [(clojure.core/list* (clojure.core/concat (clojure.core/list [{:tag :nth, :index ?n, :pattern ?ast} ?target]) ?queue)) ?env]])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))) (state__19436)) (state__19436)))))) (state__19436))) (state__19436))) (state__19436)) (state__19436))))] (state__19442))) (state__19436)))] (state__19439)) (state__19436))) (state__19436 [] (clojure.core/let [!nths []] (clojure.core/let [!not-nths []] (clojure.core/letfn [(def__19081 [arg__19137 !not-nths ?target !nths] (clojure.core/letfn [(state__19444 [] (if (clojure.core/vector? arg__19137) (if (clojure.core/= (clojure.core/count arg__19137) 2) (clojure.core/let [arg__19137_nth_0__ (clojure.core/nth arg__19137 0) arg__19137_nth_1__ (clojure.core/nth arg__19137 1)] (if (clojure.core/map? arg__19137_nth_0__) (clojure.core/let [VAL__19141 (.valAt arg__19137_nth_0__ :tag)] (clojure.core/case VAL__19141 (:nth) (if (clojure.core/= ?target arg__19137_nth_1__) (clojure.core/let [!nths (clojure.core/conj !nths arg__19137)] [!not-nths ?target !nths]) (state__19445)) (state__19445))) (state__19445))) (state__19445)) (state__19445))) (state__19445 [] (clojure.core/let [!not-nths (clojure.core/conj !not-nths arg__19137)] [!not-nths ?target !nths]))] (state__19444)))] (if (clojure.core/vector? input__19027) (if (clojure.core/= (clojure.core/count input__19027) 2) (clojure.core/let [input__19027_nth_0__ (clojure.core/nth input__19027 0) input__19027_nth_1__ (clojure.core/nth input__19027 1)] (if (clojure.core/seq? input__19027_nth_0__) (clojure.core/let [input__19027_nth_0___l__ (clojure.core/take 1 input__19027_nth_0__)] (if (clojure.core/= (clojure.core/bounded-count (clojure.core/inc 1) input__19027_nth_0___l__) 1) (clojure.core/let [input__19027_nth_0___r__ (clojure.core/drop 1 input__19027_nth_0__)] (clojure.core/let [input__19027_nth_0___l___nth_0__ (clojure.core/nth input__19027_nth_0___l__ 0)] (if (clojure.core/vector? input__19027_nth_0___l___nth_0__) (if (clojure.core/= (clojure.core/count input__19027_nth_0___l___nth_0__) 2) (clojure.core/let [input__19027_nth_0___l___nth_0___nth_0__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 0) input__19027_nth_0___l___nth_0___nth_1__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 1)] (if (clojure.core/map? input__19027_nth_0___l___nth_0___nth_0__) (clojure.core/let [VAL__19092 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tag)] (clojure.core/case VAL__19092 (:nth) (clojure.core/let [VAL__19093 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :index)] (clojure.core/let [?index VAL__19093] (clojure.core/let [VAL__19094 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :pattern)] (clojure.core/let [?pattern VAL__19094] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [ret__14524__auto__ (meander.match.runtime.epsilon/run-star-1 input__19027_nth_0___r__ [!not-nths !nths] (clojure.core/fn [[!not-nths !nths] input__19089] (clojure.core/let [input__19089_nth_0__ (clojure.core/nth input__19089 0)] (clojure.core/let [x__14360__auto__ (def__19081 input__19089_nth_0__ !not-nths ?target !nths)] (if (meander.runtime.zeta/fail? x__14360__auto__) (meander.runtime.zeta/fail) (clojure.core/let [[!not-nths ?target !nths] x__14360__auto__] [!not-nths !nths]))))) (clojure.core/fn [[!not-nths !nths]] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19082 (gensym)] (clojure.core/let [?nth-symbol x__19082] (try [(clojure.core/let [!nths__counter (meander.runtime.zeta/iterator !nths) !not-nths__counter (meander.runtime.zeta/iterator !not-nths)] (clojure.core/list (quote let*) [?nth-symbol (clojure.core/list (quote clojure.core/nth) ?target ?index)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/vec (meander.substitute.runtime.epsilon/iterator-seq !nths__counter)) (clojure.core/concat (clojure.core/list [?pattern ?nth-symbol]) (clojure.core/vec (meander.substitute.runtime.epsilon/iterator-seq !not-nths__counter))))) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))] (if (meander.runtime.zeta/fail? ret__14524__auto__) (state__19437) ret__14524__auto__))))))) (state__19437))) (state__19437))) (state__19437)) (state__19437)))) (state__19437))) (state__19437))) (state__19437)) (state__19437)))))) (state__19437 [] (if (clojure.core/vector? input__19027) (if (clojure.core/= (clojure.core/count input__19027) 2) (clojure.core/let [input__19027_nth_0__ (clojure.core/nth input__19027 0) input__19027_nth_1__ (clojure.core/nth input__19027 1)] (if (clojure.core/seq? input__19027_nth_0__) (clojure.core/letfn [(state__19447 [] (clojure.core/let [input__19027_nth_0___l__ (clojure.core/take 1 input__19027_nth_0__)] (if (clojure.core/= (clojure.core/bounded-count (clojure.core/inc 1) input__19027_nth_0___l__) 1) (clojure.core/let [input__19027_nth_0___r__ (clojure.core/drop 1 input__19027_nth_0__)] (clojure.core/let [input__19027_nth_0___l___nth_0__ (clojure.core/nth input__19027_nth_0___l__ 0)] (if (clojure.core/vector? input__19027_nth_0___l___nth_0__) (if (clojure.core/= (clojure.core/count input__19027_nth_0___l___nth_0__) 2) (clojure.core/let [input__19027_nth_0___l___nth_0___nth_0__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 0) input__19027_nth_0___l___nth_0___nth_1__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 1)] (if (clojure.core/map? input__19027_nth_0___l___nth_0___nth_0__) (clojure.core/let [VAL__19426 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :val-pattern) VAL__19425 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tag) VAL__19424 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tail) VAL__19423 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :next) VAL__19422 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :key-pattern) VAL__19421 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :head) VAL__19420 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :symbol)] (clojure.core/case VAL__19425 (:cons) (clojure.core/letfn [(state__19451 [] (clojure.core/let [?head VAL__19421] (clojure.core/let [?tail VAL__19424] (if (clojure.core/vector? input__19027_nth_0___l___nth_0___nth_1__) (clojure.core/let [input__19027_nth_0___l___nth_0___nth_1___l__ (clojure.core/subvec input__19027_nth_0___l___nth_0___nth_1__ 0 (clojure.core/min (clojure.core/count input__19027_nth_0___l___nth_0___nth_1__) 1))] (if (clojure.core/= (clojure.core/count input__19027_nth_0___l___nth_0___nth_1___l__) 1) (clojure.core/let [input__19027_nth_0___l___nth_0___nth_1___r__ (clojure.core/subvec input__19027_nth_0___l___nth_0___nth_1__ 1)] (clojure.core/let [input__19027_nth_0___l___nth_0___nth_1___l___nth_0__ (clojure.core/nth input__19027_nth_0___l___nth_0___nth_1___l__ 0)] (clojure.core/let [?head-target input__19027_nth_0___l___nth_0___nth_1___l___nth_0__] (clojure.core/let [?tail-target input__19027_nth_0___l___nth_0___nth_1___r__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?head ?head-target] [?tail ?tail-target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))) (state__19452))) (state__19452))))) (state__19452 [] (clojure.core/let [?head VAL__19421] (clojure.core/let [?tail VAL__19424] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19154 (gensym)] (clojure.core/let [?head-symbol x__19154] (clojure.core/let [x__19155 (gensym)] (clojure.core/let [?tail-symbol x__19155] (try [(clojure.core/list (quote let*) [?head-symbol (clojure.core/list (quote meander.runtime.zeta/head) ?target)] (clojure.core/list (quote if) (clojure.core/list (quote meander.runtime.zeta/fail?) ?head-symbol) (clojure.core/list (quote meander.runtime.zeta/fail)) (clojure.core/list (quote let*) [?tail-symbol (clojure.core/list (quote meander.runtime.zeta/tail) ?target)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?head ?head-symbol] [?tail ?tail-symbol]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))))))))] (state__19451)) (:empty) (clojure.core/letfn [(state__19453 [] (if (clojure.core/vector? input__19027_nth_0___l___nth_0___nth_1__) (clojure.core/case input__19027_nth_0___l___nth_0___nth_1__ ([]) (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))) (state__19454)) (state__19454))) (state__19454 [] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote if) (clojure.core/list (quote clojure.core/seq) ?target) (clojure.core/list (quote meander.runtime.zeta/fail)) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))] (state__19453)) (:entry) (clojure.core/letfn [(state__19455 [] (if (clojure.core/map? VAL__19422) (clojure.core/let [VAL__19189 (.valAt VAL__19422 :tag)] (clojure.core/case VAL__19189 (:literal) (clojure.core/let [VAL__19190 (.valAt VAL__19422 :form)] (clojure.core/let [?form VAL__19190] (clojure.core/let [?val VAL__19426] (clojure.core/let [?next VAL__19423] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19179 (gensym)] (clojure.core/let [?val-target x__19179] (clojure.core/let [x__19180 (gensym)] (clojure.core/let [?next-target x__19180] (try [(clojure.core/list (quote let*) [?val-target (clojure.core/list (quote clojure.core/get) ?target (clojure.core/list (quote quote) ?form)) ?next-target (clojure.core/list (quote clojure.core/dissoc) ?target (clojure.core/list (quote quote) ?form))] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?val ?val-target] [?next ?next-target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))))))))) (state__19456))) (state__19456))) (state__19456 [] (clojure.core/let [?key VAL__19422] (clojure.core/let [?val VAL__19426] (clojure.core/let [?next VAL__19423] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19193 (gensym)] (clojure.core/let [?key-target x__19193] (clojure.core/let [x__19194 (gensym)] (clojure.core/let [?val-target x__19194] (clojure.core/let [x__19195 (gensym)] (clojure.core/let [?next-target x__19195] (try [(clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn*) (clojure.core/list [(quote $entry__19476)] (clojure.core/list (quote let) [?key-target (clojure.core/list (quote clojure.core/key) (quote $entry__19476)) ?val-target (clojure.core/list (quote clojure.core/val) (quote $entry__19476)) ?next-target (clojure.core/list (quote clojure.core/dissoc) ?target ?key-target)] (clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn) [(quote $state__19477)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?val ?val-target] [?next ?next-target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list [?key ?key-target]) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))))) ?target)] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))))))))))] (state__19455)) (:into) (clojure.core/let [VAL__19213 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :memory-variable)] (if (clojure.core/map? VAL__19213) (clojure.core/let [VAL__19214 (.valAt VAL__19213 :symbol)] (clojure.core/let [?symbol VAL__19214] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote meander.runtime.zeta/into-memory-variable) [(quote $state__19477) (clojure.core/list (quote quote) ?symbol) ?target] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))) (state__19448))) (:join) (clojure.core/let [VAL__19226 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :left)] (clojure.core/let [?left VAL__19226] (clojure.core/let [VAL__19227 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :right)] (clojure.core/let [?right VAL__19227] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19215 (gensym "partitions__")] (clojure.core/let [?partitions-symbol x__19215] (clojure.core/let [x__19216 (gensym "partition__")] (clojure.core/let [?partition-symbol x__19216] (clojure.core/let [x__19217 (gensym "left__")] (clojure.core/let [?left-symbol x__19217] (clojure.core/let [x__19218 (gensym "right__")] (clojure.core/let [?right-symbol x__19218] (try [(clojure.core/list (quote let*) [?partitions-symbol (clojure.core/list (quote meander.runtime.zeta/partitions) ?target)] (clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn*) (clojure.core/list [?partition-symbol] (clojure.core/list (quote let*) [?left-symbol (clojure.core/list (quote clojure.core/nth) ?partition-symbol 0) ?right-symbol (clojure.core/list (quote clojure.core/nth) ?partition-symbol 1)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?left ?left-symbol] [?right ?right-symbol]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))))) ?partitions-symbol))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))))))))))))) (:literal) (clojure.core/let [VAL__19235 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :form)] (clojure.core/let [?form VAL__19235] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote if) (clojure.core/list (quote =) (clojure.core/list (quote quote) ?form) ?target) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))) (clojure.core/list (quote meander.runtime.zeta/fail)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))) (:logic-variable) (clojure.core/letfn [(state__19457 [] (clojure.core/let [?symbol VAL__19420] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (if (clojure.core/map? input__19027_nth_1__) (clojure.core/let [X__19241 (clojure.core/set input__19027_nth_1__)] (if (clojure.core/<= 1 (clojure.core/count X__19241)) (clojure.core/loop [search_space__19459 (clojure.core/seq X__19241)] (if (clojure.core/seq search_space__19459) (clojure.core/let [elem__19242 (clojure.core/first search_space__19459) result__19460 (clojure.core/let [elem__19242_nth_0__ (clojure.core/nth elem__19242 0) elem__19242_nth_1__ (clojure.core/nth elem__19242 1)] (clojure.core/let [?key elem__19242_nth_0__] (if (clojure.core/= ?symbol elem__19242_nth_1__) (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote let*) [(quote $value__19478) (clojure.core/list (quote clojure.core/get) (quote $state__19477) ?key)] (clojure.core/list (quote if) (clojure.core/list (quote =) (quote $value__19478) ?target) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))) (clojure.core/list (quote meander.runtime.zeta/fail))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))) (meander.runtime.zeta/fail))))] (if (meander.runtime.zeta/fail? result__19460) (recur (clojure.core/next search_space__19459)) result__19460)) (state__19458))) (state__19458))) (state__19458)))))) (state__19458 [] (clojure.core/let [?symbol VAL__19420] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote meander.runtime.zeta/bind-logic-variable) [(quote $state__19477) (clojure.core/list (quote quote) ?symbol) ?target] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest (clojure.core/let [form__15762__auto__ {(clojure.core/list (quote quote) ?symbol) ?symbol}] (clojure.core/merge (clojure.core/into {} ?env) form__15762__auto__))])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))] (state__19457)) (:map) (clojure.core/let [?next VAL__19423] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote if) (clojure.core/list (quote clojure.core/map?) ?target) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))) (clojure.core/list (quote meander.runtime.zeta/fail)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))) (:memory-variable) (clojure.core/letfn [(state__19462 [] (clojure.core/let [?symbol VAL__19420] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (if (clojure.core/map? input__19027_nth_1__) (clojure.core/let [X__19268 (clojure.core/set input__19027_nth_1__)] (if (clojure.core/<= 1 (clojure.core/count X__19268)) (clojure.core/loop [search_space__19464 (clojure.core/seq X__19268)] (if (clojure.core/seq search_space__19464) (clojure.core/let [elem__19269 (clojure.core/first search_space__19464) result__19465 (clojure.core/let [elem__19269_nth_0__ (clojure.core/nth elem__19269 0) elem__19269_nth_1__ (clojure.core/nth elem__19269 1)] (clojure.core/let [?key elem__19269_nth_0__] (if (clojure.core/= ?symbol elem__19269_nth_1__) (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote let*) [(quote $value__19478) (clojure.core/list (quote clojure.core/get) (quote $state__19477) ?key) (quote $value__19478) (clojure.core/list (quote clojure.core/conj) (quote $value__19478) ?target) (quote $state__19477) (clojure.core/list (quote clojure.core/assoc) (quote $state__19477) ?key (quote $value__19478))] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))) (meander.runtime.zeta/fail))))] (if (meander.runtime.zeta/fail? result__19465) (recur (clojure.core/next search_space__19464)) result__19465)) (state__19463))) (state__19463))) (state__19463)))))) (state__19463 [] (clojure.core/let [?symbol VAL__19420] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote let*) [(quote $state__19477) (clojure.core/list (quote meander.runtime.zeta/bind-memory-variable) (quote $state__19477) (clojure.core/list (quote quote) ?symbol) ?target)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest (clojure.core/let [form__15762__auto__ {(clojure.core/list (quote quote) ?symbol) ?symbol}] (clojure.core/merge (clojure.core/into {} ?env) form__15762__auto__))])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))] (state__19462)) (:reference) (clojure.core/let [?symbol VAL__19420] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn) [(quote $state__19477)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))) (clojure.core/list ?symbol ?target (quote $state__19477)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))) (:root) (clojure.core/let [?next VAL__19423] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote let*) [(quote $state__19477) {}] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))) (state__19448))) (state__19448))) (state__19448)) (state__19448)))) (state__19448)))) (state__19448 [] (if (clojure.core/= (clojure.core/bounded-count (clojure.core/inc 1) input__19027_nth_0__) 1) (clojure.core/let [input__19027_nth_0___nth_0__ (clojure.core/nth input__19027_nth_0__ 0)] (if (clojure.core/vector? input__19027_nth_0___nth_0__) (clojure.core/let [input__19027_nth_0___nth_0___l__ (clojure.core/subvec input__19027_nth_0___nth_0__ 0 (clojure.core/min (clojure.core/count input__19027_nth_0___nth_0__) 2))] (if (clojure.core/= (clojure.core/count input__19027_nth_0___nth_0___l__) 2) (clojure.core/let [input__19027_nth_0___nth_0___r__ (clojure.core/subvec input__19027_nth_0___nth_0__ 2)] (clojure.core/let [input__19027_nth_0___nth_0___l___nth_0__ (clojure.core/nth input__19027_nth_0___nth_0___l__ 0) input__19027_nth_0___nth_0___l___nth_1__ (clojure.core/nth input__19027_nth_0___nth_0___l__ 1)] (if (clojure.core/map? input__19027_nth_0___nth_0___l___nth_0__) (clojure.core/let [VAL__19304 (.valAt input__19027_nth_0___nth_0___l___nth_0__ :tag)] (clojure.core/case VAL__19304 (:seq) (clojure.core/let [VAL__19305 (.valAt input__19027_nth_0___nth_0___l___nth_0__ :next)] (clojure.core/let [?next VAL__19305] (if (clojure.core/seq? input__19027_nth_0___nth_0___l___nth_1__) (clojure.core/let [?target input__19027_nth_0___nth_0___l___nth_1__] (clojure.core/let [?rest input__19027_nth_0___nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))) (state__19449)))) (state__19449))) (state__19449)))) (state__19449))) (state__19449))) (state__19449))) (state__19449 [] (clojure.core/let [input__19027_nth_0___l__ (clojure.core/take 1 input__19027_nth_0__)] (if (clojure.core/= (clojure.core/bounded-count (clojure.core/inc 1) input__19027_nth_0___l__) 1) (clojure.core/let [input__19027_nth_0___r__ (clojure.core/drop 1 input__19027_nth_0__)] (clojure.core/let [input__19027_nth_0___l___nth_0__ (clojure.core/nth input__19027_nth_0___l__ 0)] (if (clojure.core/vector? input__19027_nth_0___l___nth_0__) (if (clojure.core/= (clojure.core/count input__19027_nth_0___l___nth_0__) 2) (clojure.core/let [input__19027_nth_0___l___nth_0___nth_0__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 0)] (clojure.core/letfn [(state__19467 [] (clojure.core/let [input__19027_nth_0___l___nth_0___nth_1__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 1)] (if (clojure.core/map? input__19027_nth_0___l___nth_0___nth_0__) (clojure.core/let [VAL__19314 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tag)] (clojure.core/case VAL__19314 (:seq) (clojure.core/let [VAL__19315 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :next)] (clojure.core/let [?next VAL__19315] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote if) (clojure.core/list (quote clojure.core/seq?) ?target) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))) (state__19468))) (state__19468)))) (state__19468 [] (if (clojure.core/map? input__19027_nth_0___l___nth_0___nth_0__) (clojure.core/let [VAL__19322 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tag)] (clojure.core/case VAL__19322 (:some-map) (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))) (state__19469))) (state__19469))) (state__19469 [] (clojure.core/let [input__19027_nth_0___l___nth_0___nth_1__ (clojure.core/nth input__19027_nth_0___l___nth_0__ 1)] (if (clojure.core/map? input__19027_nth_0___l___nth_0___nth_0__) (clojure.core/let [VAL__19434 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :tag) VAL__19433 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :next)] (clojure.core/letfn [(state__19470 [] (clojure.core/case VAL__19434 (:star) (clojure.core/letfn [(state__19473 [] (clojure.core/let [VAL__19342 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :pattern)] (if (clojure.core/map? VAL__19342) (clojure.core/let [VAL__19343 (.valAt VAL__19342 :tag)] (clojure.core/case VAL__19343 (:cat) (clojure.core/let [VAL__19344 (.valAt VAL__19342 :sequence)] (if (clojure.core/vector? VAL__19344) (clojure.core/let [!xs []] (clojure.core/let [ret__14524__auto__ (meander.match.runtime.epsilon/run-star-1 VAL__19344 [!xs] (clojure.core/fn [[!xs] input__19353] (clojure.core/let [input__19353_nth_0__ (clojure.core/nth input__19353 0)] (clojure.core/let [!xs (clojure.core/conj !xs input__19353_nth_0__)] [!xs]))) (clojure.core/fn [[!xs]] (clojure.core/let [X__19352 (clojure.core/count VAL__19344)] (clojure.core/let [?n X__19352] (clojure.core/let [VAL__19345 (.valAt VAL__19342 :next)] (if (clojure.core/map? VAL__19345) (clojure.core/let [VAL__19346 (.valAt VAL__19345 :tag)] (clojure.core/case VAL__19346 (:empty) (if (clojure.core/map? VAL__19433) (clojure.core/let [VAL__19348 (.valAt VAL__19433 :tag)] (clojure.core/case VAL__19348 (:empty) (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19323 (repeatedly ?n gensym)] (if (clojure.core/seq? x__19323) (clojure.core/let [!nth-symbol (clojure.core/vec x__19323)] (clojure.core/let [?nth-symbols x__19323] (clojure.core/let [x__19326 ?nth-symbols] (if (clojure.core/seq? x__19326) (clojure.core/let [!nth-symbol (clojure.core/into !nth-symbol x__19326)] (clojure.core/let [x__19329 (range ?n)] (if (clojure.core/seq? x__19329) (clojure.core/let [!index (clojure.core/vec x__19329)] (clojure.core/let [x__19332 (gensym)] (clojure.core/let [?take-symbol x__19332] (clojure.core/let [x__19333 (gensym)] (clojure.core/let [?drop-symbol x__19333] (clojure.core/let [x__19334 (gensym)] (clojure.core/let [?goal-symbol x__19334] (try [(clojure.core/let [!xs__counter (meander.runtime.zeta/iterator !xs) !index__counter (meander.runtime.zeta/iterator !index) !nth-symbol__counter (meander.runtime.zeta/iterator !nth-symbol)] (clojure.core/list (quote let*) [?goal-symbol (clojure.core/list (quote fn*) ?goal-symbol (clojure.core/list [(quote $input__19479) (quote $state__19477)] (clojure.core/list (quote if) (clojure.core/list (quote clojure.core/seq) (quote $input__19479)) (clojure.core/list (quote meander.runtime.zeta/bind) [?take-symbol (clojure.core/list (quote meander.runtime.zeta/-take) (quote $input__19479) ?n)] (clojure.core/list (quote let*) (clojure.core/let [return__19032 (clojure.core/transient [])] (clojure.core/dotimes [n__19031 ?n] (clojure.core/conj! return__19032 (if (.hasNext !nth-symbol__counter) (.next !nth-symbol__counter))) (clojure.core/conj! return__19032 (clojure.core/list (quote clojure.core/nth) ?take-symbol (if (.hasNext !index__counter) (.next !index__counter))))) (clojure.core/persistent! return__19032)) (clojure.core/list (quote meander.runtime.zeta/bind) [?drop-symbol (clojure.core/list (quote meander.runtime.zeta/-drop) (quote $input__19479) ?n)] (clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn) [(quote $state__19477)] (clojure.core/list ?goal-symbol ?drop-symbol (quote $state__19477))) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/let [return__19034 (clojure.core/transient [])] (clojure.core/dotimes [n__19033 ?n] (clojure.core/conj! return__19034 [(if (.hasNext !xs__counter) (.next !xs__counter)) (if (.hasNext !nth-symbol__counter) (.next !nth-symbol__counter))])) (clojure.core/persistent! return__19034))) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))))) (clojure.core/list (quote meander.runtime.zeta/succeed) (quote $state__19477)))))] (clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn) [(quote $state__19477)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))) (clojure.core/list ?goal-symbol ?target (quote $state__19477)))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))))) (state__19474)))) (state__19474))))) (state__19474)))))) (state__19474))) (state__19474)) (state__19474))) (state__19474)))))))] (if (meander.runtime.zeta/fail? ret__14524__auto__) (state__19474) ret__14524__auto__))) (state__19474))) (state__19474))) (state__19474)))) (state__19474 [] (clojure.core/let [VAL__19367 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :pattern)] (clojure.core/let [?pattern VAL__19367] (clojure.core/let [?next VAL__19433] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (clojure.core/let [x__19355 (gensym "partitions__")] (clojure.core/let [?partitions-symbol x__19355] (clojure.core/let [x__19356 (gensym "partition__")] (clojure.core/let [?partition-symbol x__19356] (clojure.core/let [x__19357 (gensym "left__")] (clojure.core/let [?left-symbol x__19357] (clojure.core/let [x__19358 (gensym "right__")] (clojure.core/let [?right-symbol x__19358] (clojure.core/let [x__19359 (gensym "goal__")] (clojure.core/let [?goal-symbol x__19359] (try [(clojure.core/list (quote let*) [?goal-symbol (clojure.core/list (quote fn*) ?goal-symbol (clojure.core/list [(quote $input__19479) (quote $state__19477)] (clojure.core/list (quote let*) [?partitions-symbol (clojure.core/list (quote meander.runtime.zeta/partitions) (quote $input__19479))] (clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn*) (clojure.core/list [?partition-symbol] (clojure.core/list (quote let*) [?left-symbol (clojure.core/list (quote clojure.core/nth) ?partition-symbol 0) ?right-symbol (clojure.core/list (quote clojure.core/nth) ?partition-symbol 1)] (clojure.core/list (quote clojure.core/mapcat) (clojure.core/list (quote fn*) (clojure.core/list [(quote $state__19477)] (clojure.core/list (quote meander.runtime.zeta/knit) [(clojure.core/list ?goal-symbol ?right-symbol (quote $state__19477)) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?right-symbol]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))]))) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list [?pattern ?left-symbol]) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))))) ?partitions-symbol))))] (clojure.core/list ?goal-symbol ?target (quote $state__19477)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))))))))))))))] (state__19473)) (:vector) (clojure.core/let [?next VAL__19433] (if (clojure.core/vector? input__19027_nth_0___l___nth_0___nth_1__) (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))) (state__19471))) (state__19471))) (state__19471 [] (clojure.core/case VAL__19434 (:vector) (clojure.core/let [?next VAL__19433] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote if) (clojure.core/list (quote clojure.core/vector?) ?target) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?next ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))) (:wildcard) (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))) (state__19472))) (state__19472 [] (clojure.core/let [VAL__19430 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :bindings)] (clojure.core/case VAL__19434 (:with) (clojure.core/let [?bindings VAL__19430] (clojure.core/let [VAL__19402 (.valAt input__19027_nth_0___l___nth_0___nth_0__ :body)] (clojure.core/let [?body VAL__19402] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list* (clojure.core/concat (clojure.core/list [?bindings ?target] [?body ?target]) ?rest)) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__)))))))))) (:with-bindings) (if (clojure.core/vector? VAL__19430) (if (clojure.core/= (clojure.core/count VAL__19430) 1) (clojure.core/let [VAL__19410_nth_0__ (clojure.core/nth VAL__19430 0)] (if (clojure.core/map? VAL__19410_nth_0__) (clojure.core/let [VAL__19413 (.valAt VAL__19410_nth_0__ :reference)] (if (clojure.core/map? VAL__19413) (clojure.core/let [VAL__19414 (.valAt VAL__19413 :symbol)] (clojure.core/let [!symbol []] (clojure.core/let [!symbol (clojure.core/conj !symbol VAL__19414)] (clojure.core/let [VAL__19415 (.valAt VAL__19410_nth_0__ :pattern)] (clojure.core/let [!pattern []] (clojure.core/let [!pattern (clojure.core/conj !pattern VAL__19415)] (clojure.core/let [?target input__19027_nth_0___l___nth_0___nth_1__] (clojure.core/let [?rest input__19027_nth_0___r__] (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/let [!symbol__counter (meander.runtime.zeta/iterator !symbol) !pattern__counter (meander.runtime.zeta/iterator !pattern)] (clojure.core/list (quote letfn) (clojure.core/let [return__19035 (clojure.core/transient [])] (clojure.core/while (clojure.core/and (.hasNext !symbol__counter) (.hasNext !pattern__counter)) (clojure.core/conj! return__19035 (clojure.core/list (if (.hasNext !symbol__counter) (.next !symbol__counter)) [(quote $input__19479) (quote $state__19477)] (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [(clojure.core/list [(if (.hasNext !pattern__counter) (.next !pattern__counter)) (quote $input__19479)]) ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))))) (clojure.core/persistent! return__19035)) (clojure.core/let [CATA_RESULT__15663__auto__ (CATA__FN__19030 [?rest ?env])] (if (meander.runtime.zeta/fail? CATA_RESULT__15663__auto__) (throw (meander.runtime.zeta/fail)) (clojure.core/nth CATA_RESULT__15663__auto__ 0)))))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))))))))) (state__19450))) (state__19450))) (state__19450)) (state__19450)) (state__19450))))] (state__19470))) (state__19450))))] (state__19467))) (state__19450)) (state__19450)))) (state__19450)))) (state__19450 [] (clojure.core/case input__19027_nth_0__ (()) (clojure.core/let [?env input__19027_nth_1__] (try [(clojure.core/list (quote meander.runtime.zeta/succeed) (quote $state__19477))] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))) (state__19438)))] (state__19447)) (state__19438))) (state__19438)) (state__19438))) (state__19438 [] (clojure.core/let [?x input__19027] (try [?x] (catch java.lang.Exception e__16603__auto__ (if (meander.runtime.zeta/fail? e__16603__auto__) (meander.runtime.zeta/fail) (throw e__16603__auto__))))))] (state__19435)))] (clojure.core/let [x__14360__auto__ (CATA__FN__19030 input__19027)] (if (meander.runtime.zeta/fail? x__14360__auto__) (meander.runtime.zeta/fail) (clojure.core/let [[CATA_RETURN__19036] x__14360__auto__] CATA_RETURN__19036))))] (if (meander.runtime.zeta/fail? ret__14540__auto__) nil ret__14540__auto__)))
